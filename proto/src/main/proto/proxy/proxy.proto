syntax = "proto3";

package apache.rocketmq.proxy.v1;

import "common.proto";
import "controller/model.proto";

option java_multiple_files = true;
option java_package = "apache.rocketmq.proxy.v1";
option java_generate_equals_and_hash = true;
option java_string_check_utf8 = true;
option java_outer_classname = "ProxyApis";

message Status {
  common.v1.Code code = 1;
  string message = 2;
}

message ProxyRequestContext {}

message ResetConsumeOffsetRequest {
  ProxyRequestContext context = 1;
  // Topic name
  string topic = 2;
  // Queue id, -1 means reset all queue
  int32 queue_id = 3;
  // Consumer group name
  string group = 4;
  // New consume offset
  int64 new_consume_offset = 5;
}

message ResetConsumeOffsetReply {
  Status status = 1;
}

message ResetConsumeOffsetByTimestampRequest {
  ProxyRequestContext context = 1;
  // Topic name
  string topic = 2;
  // Queue id, -1 means reset all queue
  int32 queue_id = 3;
  // Consumer group name
  string group = 4;
  // Timestamp
  int64 timestamp = 5;
}

message TopicStatsRequest {
  ProxyRequestContext context = 1;
  // Topic name, required
  string topic = 2;
  // Queue id, -1 means query all queue
  int32 queue_id = 3;
  // Consumer group name
  string group = 4;
}

message StreamStats {
  // Stream id
  int64 stream_id = 1;
  // Stream role
  controller.v1.StreamRole role = 2;
  // Min message offset
  int64 min_offset = 3;
  // Max message offset
  int64 max_offset = 4;
  // Consume offset, if consumer group name not specified, return -1
  int64 consume_offset = 5;
}

message QueueStats {
  // Queue id
  int32 queue_id = 1;
  // Stream stats which belong to this topic
  repeated StreamStats stream_stats = 2;
}

message TopicStatsReply {
  Status status = 1;
  // Topic id
  int64 id = 2;
  // Topic name
  string name = 3;
  // Queue stats
  repeated QueueStats queue_stats = 4;
}

message ProducerClientConnectionRequest {
  ProxyRequestContext context = 1;
  // Producer client id
  string production_group = 2;
}

message ProducerClientConnection {
  // Producer client id
  string client_id = 1;
  // Protocol
  string protocol = 2;
  // Language
  string language = 3;
  // Version
  string version = 4;
  // Client address
  string address = 5;
  // Connected time
  int64 connected_time = 6;
  // Last update time
  int64 last_update_time = 7;
}

message ProducerClientConnectionReply {
  Status status = 1;
  // Producer client connection
  repeated ProducerClientConnection connection = 2;
}

service ProxyService {
  rpc resetConsumeOffset(ResetConsumeOffsetRequest) returns (ResetConsumeOffsetReply) {}
  rpc resetConsumeOffsetByTimestamp(ResetConsumeOffsetByTimestampRequest) returns (ResetConsumeOffsetReply) {}
  rpc topicStats(TopicStatsRequest) returns (TopicStatsReply) {}
  rpc producerClientConnection(ProducerClientConnectionRequest) returns (ProducerClientConnectionReply) {}
}