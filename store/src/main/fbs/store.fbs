namespace com.automq.rocketmq.store.model.generated;

enum PopOperationType:short {
    POP_NORMAL,
    POP_RETRY,
    POP_ORDER
}

table CheckPoint {
  topic_id:long;
  queue_id:int;
  message_offset:long;
  count:int;
  consumer_group_id:long;
  operation_id:long;
  pop_operation_type:PopOperationType;
  delivery_timestamp:long;
  next_visible_timestamp:long;
}

table ReceiptHandle {
  consumer_group_id:long;
  topic_id:long;
  queue_id:int;
  operation_id:long;
}

union Operation { PopOperation, AckOperation, ChangeInvisibleDurationOperation, ResetConsumeOffsetOperation }

table OperationLogItem {
  operation:Operation;
}

table PopOperation {
  consumer_group_id:long;
  topic_id:long;
  queue_id:int;
  offset:long;
  count:int;
  invisible_duration:long;
  operation_timestamp:long;
  end_mark:bool; // only used to advance consume offset when the last one message is popped but be filtered
  type:PopOperationType;
}

enum AckOperationType:short {
    ACK_NORMAL,
    ACK_TIMEOUT,
}

table AckOperation {
  receipt_handle:ReceiptHandle;
  operation_timestamp:long;
  type:AckOperationType;
}

table ChangeInvisibleDurationOperation {
  receipt_handle:ReceiptHandle;
  invisible_duration:long;
  operation_timestamp:long;
}

table ResetConsumeOffsetOperation {
  consumer_group_id:long;
  topic_id:long;
  queue_id:int;
  offset:long;
  operation_timestamp:long;
}

table OperationSnapshot {
  snapshot_end_offset:long;
  check_points:[CheckPoint];
  consumer_group_metadatas:[ConsumerGroupMetadata];
}

table ConsumerGroupMetadata {
  consumer_group_id:long;
  consume_offset:long;
  ack_offset:long;
  ack_bit_map:[byte];
  retry_consume_offset:long;
  retry_ack_offset:long;
  retry_ack_bit_map:[byte];
  consume_times:[ConsumeTimes];
  // for identify the consumer group metadata version, usually it is the first operation id when the consumer group metadata is created or reset
  version: long;
}

table ConsumeTimes {
  offset:long;
  consume_times:int;
}

enum TimerHandlerType:short {
    POP_REVIVE,
    PULL_RETRY,
    TIMER_MESSAGE,
    TRANSACTION_MESSAGE,
}

table TimerTag {
   delivery_timestamp:long;
   handler_type:TimerHandlerType;
   payload: [byte];
}
