name: E2E test for pull request

# read-write repo token
# access to secrets
#on:
#  workflow_run:
#    workflows: ["BUILD-CI"]
#    types:
#      - completed
#    branches: ['**']

on:
  workflow_call:


env:
  DOCKER_REPO: automqinc/rocketmq_e2e
  DB_USERNAME: "root"
  DB_PASSWORD: "root"
  AWS_ACCESS_KEY: foot
  AWS_SECRET_KEY: bar
  AWS_DEFAULT_REGION: eu-west-2
  AWS_S3_ENDPOINT: http://localhost:4566
  AWS_S3_BUCKET: ros

jobs:
  docker:
    runs-on: ubuntu-latest
    if: always()
#    if: >
#      github.event.workflow_run.event == 'pull_request' &&
#      github.event.workflow_run.conclusion == 'success'
    timeout-minutes: 30
    strategy:
      matrix:
        java-version: ["17"]
    steps:
      - name: 'Download ddl.sql'
        uses: actions/download-artifact@v2
        with:
          name: metadata
          path: ${{github.workspace}}/
      - name: 'Download artifact'
        uses: actions/download-artifact@v2
        with:
          name: rocketmq
          path: ${{github.workspace}}/
      - run: |
          unzip rocketmq*.zip
          mv rocketmq-on-s3/ rocketmq/
          ls rocketmq/
          ls rocketmq/bin
          pwd
      - uses: actions/checkout@v3
        with:
          repository: AutoMQ/rocketmq-e2e
#          ref: master TODO: change to master until ci success
          ref: ros_docker
          path: rocketmq-e2e
          token: ${{ secrets.PAT_E2E }}
      - name: docker-login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and save docker images
        id: build-images
        run: |
          cd rocketmq-e2e/rocketmq-docker
          version=${{ github.event.pull_request.number || github.ref_name }}-$(uuidgen)
          mkdir versionlist
          touch versionlist/"${version}-`echo ${{ matrix.base-image }} | sed -e "s/:/-/g"`"
          pwd
          sh build-image.sh ${version} ${DOCKER_REPO}
          docker push ${DOCKER_REPO}:${version}
          ls versionlist/
      - uses: actions/upload-artifact@v3
        name: Upload distribution tar
        with:
          name: versionlist
          path: rocketmq-e2e/rocketmq-docker/versionlist/*
  
  list-version:
    if: always()
    name: List version
    needs: [docker]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version-json: ${{ steps.show_versions.outputs.version-json }}
    steps:
      - uses: actions/download-artifact@v3
        name: Download versionlist
        with:
          name: versionlist
          path: versionlist
      - name: Show versions
        id: show_versions
        run: | 
          a=(`ls versionlist`)
          printf '%s\n' "${a[@]}" | jq -R . | jq -s .
          echo version-json=`printf '%s\n' "${a[@]}" | jq -R . | jq -s .` >> $GITHUB_OUTPUT
  deploy:
    if: ${{ success() }}
    name: Deploy RocketMQ
    needs: [list-version,docker]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: actions/checkout@v1
      - uses: helm/kind-action@v1.5.0
        name: Create k8s Kind Cluster
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.1
      - name: Deploy localstack
        uses: vimeda/helm@v1.6.8
        with:
          release: 'localstack'
          namespace: 'default'
          chart: 'localstack-charts/localstack'
          repo: "https://localstack.github.io/helm-charts"
          values: |
            enableStartupScripts: true
            startupScriptContent: |
              #!/bin/bash
              set -e
              export TERM=ansi
              export AWS_ACCESS_KEY_ID=${{env.AWS_ACCESS_KEY}}
              export AWS_SECRET_ACCESS_KEY=${{env.AWS_SECRET_KEY}}
              export AWS_DEFAULT_REGION=${{env.AWS_DEFAULT_REGION}}
              export PAGER=

              echo "S3 Configuration started"

              aws --endpoint-url=${{env.AWS_S3_ENDPOINT}} s3 mb s3://${{env.AWS_DEFAULT_REGION}}
              aws --endpoint-url=${{env.AWS_S3_ENDPOINT}} s3 cp /tmp/localstack/test-data/ s3://${{env.AWS_DEFAULT_REGION}}/chart --recursive

              echo "S3 Configured"
      - name: Deploy mysql
        uses: vimeda/helm@v1.6.8
        with:
          release: 'mysql'
          namespace: 'default'
          chart: 'bitnami/mysql'
          repo: "https://charts.bitnami.com/bitnami"
          values: |
            auth
              rootPassword: ${{env.DB_PASSWORD}}
              database: metadata
            initdbScripts: metadata.sql
      - name: Deploy rocketmq
        uses: vimeda/helm@v1.6.8
        with:
          release: 'rocketmq'
          namespace: 'default'
          chart: 'rocketmq-e2e/rocketmq-k8s-helm'
          token: '${{ secrets.PAT_E2E }}'
          repo: "https://github.com/AutoMQ/rocketmq-e2e.git"
          values: |
            broker:
              image:
                repository: ${{env.DOCKER_REPO}}
                tag: ${{ matrix.version }}
              s3stream:
                s3WALPath: "/tmp/s3rocketmq/wal"
                s3Endpoint: ${{env.AWS_S3_ENDPOINT}}
                s3Bucket: ${{env.AWS_S3_BUCKET}}
                s3Region: ${{env.AWS_DEFAULT_REGION}}
                s3ForcePathStyle: true
                s3AccessKey: ${{env.AWS_ACCESS_KEY}}
                s3SecretKey: ${{env.AWS_SECRET_KEY}}
              
              db:
                url: "jdbc:mysql://localhost:3306/metadata"
                userName: ${{env.DB_USERNAME}}
                password: ${{env.DB_PASSWORD}}
  test-e2e-grpc-java:
    if: ${{ success() }}
    name: Test E2E grpc java
    needs: [list-version, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: e2e test
        with:
          action: "test"
          ask-config: "${{ secrets.ASK_CONFIG_VIRGINA }}"
          test-version: "${{ matrix.version }}"
          test-code-git: "https://github.com/AutoMQ/rocketmq-e2e.git"
          test-code-branch: "master"
          test-code-path: java/e2e
          test-cmd: "mvn -B test"
          job-id: 0
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/test_report/TEST-*.xml'
          annotate_only: true
          include_passed: true
          detailed_summary: true
      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload test log
        with:
          name: test-e2e-grpc-java-log.txt
          path: testlog.txt
          
  test-e2e-golang:
    if: ${{ success() }}
    name: Test E2E golang
    needs: [list-version, deploy]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: e2e test
        with:
          action: "test"
          ask-config: "${{ secrets.ASK_CONFIG_VIRGINA }}"
          test-version: "${{ matrix.version }}"
          test-code-git: "https://github.com/AutoMQ/rocketmq-e2e.git"
          test-code-branch: "master"
          test-code-path: golang
          test-cmd: |
            cd ../common &&  mvn -Prelease -DskipTests clean package -U
            cd ../rocketmq-admintools && source bin/env.sh
            cd ../golang && go get -u github.com/apache/rocketmq-clients/golang && gotestsum --junitfile ./target/surefire-reports/TEST-report.xml ./mqgotest/... -timeout 2m  -v
          job-id: 0
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/test_report/TEST-*.xml'
          annotate_only: true
          include_passed: true
          detailed_summary: true
      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload test log
        with:
          name: test-e2e-golang-log.txt
          path: testlog.txt
          
  test-e2e-remoting-java:
    if: ${{ success() }}
    name: Test E2E remoting java
    needs: [ list-version, deploy ]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: e2e test
        with:
          action: "test"
          ask-config: "${{ secrets.ASK_CONFIG_VIRGINA }}"
          test-version: "${{ matrix.version }}"
          test-code-git: "https://github.com/AutoMQ/rocketmq-e2e.git"
          test-code-branch: "master"
          test-code-path: java/e2e-v4
          test-cmd: "mvn -B test"
          job-id: 0
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/test_report/TEST-*.xml'
          annotate_only: true
          include_passed: true
          detailed_summary: true
      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload test log
        with:
          name: test-e2e-remoting-java-log.txt
          path: testlog.txt

  clean:
    if: always()
    name: Clean
    needs: [list-version, test-e2e-grpc-java, test-e2e-golang, test-e2e-remoting-java]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: clean
        with:
          action: "clean"
          ask-config: "${{ secrets.ASK_CONFIG_VIRGINA }}"
          test-version: "${{ matrix.version }}"
          job-id: ${{ strategy.job-index }}
          
