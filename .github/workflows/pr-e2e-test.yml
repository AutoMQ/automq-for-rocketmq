name: E2E test for pull request

# read-write repo token
# access to secrets
#on:
#  workflow_run:
#    workflows: ["BUILD-CI"]
#    types:
#      - completed
#    branches: ['**']

on:
  workflow_call:


env:
  DOCKER_REPO: automqinc/rocketmq_e2e
  DB_USERNAME: "root"
  DB_PASSWORD: "root"
  AWS_ACCESS_KEY: foot
  AWS_SECRET_KEY: bar
  AWS_DEFAULT_REGION: eu-west-2
  AWS_S3_ENDPOINT: http://localhost:4566
  AWS_S3_BUCKET: ros

jobs:
  docker:
    runs-on: ubuntu-latest
    if: always()
#    if: >
#      github.event.workflow_run.event == 'pull_request' &&
#      github.event.workflow_run.conclusion == 'success'
    timeout-minutes: 30
    strategy:
      matrix:
        java-version: ["17"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Download artifact'
        uses: actions/download-artifact@v2
        with:
          name: rocketmq
          path: ${{github.workspace}}/rocketmq-on-s3/distribution/target
      - run: |
          cd rocketmq-on-s3/distribution/target
          ls
          pwd
      - uses: actions/checkout@v3
        with:
          repository: AutoMQ/rocketmq-e2e
          ref: master
          path: rocketmq-e2es
          token: ${{ secrets.PAT_E2E }}
      - name: docker-login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and save docker images
        id: build-images
        working-directory: ./distribution/docker
        run: |
          pwd
          ls
          mkdir versionlist
          full_node_version=$(git ls-remote --tags | awk -F '/' 'END{print $3}')
          commit_version=$(git rev-parse --short HEAD)
          version=${full_node_version}-${commit_version}
          touch versionlist/"${version}"
          echo "version=${version}"
          sh build-ci.sh ${DOCKER_REPO} ${version}
          ls versionlist/
      - uses: actions/upload-artifact@v3
        name: Upload distribution versionlist
        with:
          name: versionlist
          path: ./distribution/docker/versionlist/*
  
  list-version:
    if: always()
    name: List version
    needs: [docker]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version-json: ${{ steps.show_versions.outputs.version-json }}
    steps:
      - uses: actions/download-artifact@v3
        name: Download versionlist
        with:
          name: versionlist
          path: versionlist
      - name: Show versions
        id: show_versions
        run: |
          pwd
          a=(`ls versionlist`)
          printf '%s\n' "${a[@]}" | jq -R . | jq -s .
          echo version-json=`printf '%s\n' "${a[@]}" | jq -R . | jq -s .` >> $GITHUB_OUTPUT
  deploy:
    if: ${{ success() }}
    name: Deploy RocketMQ
    needs: [list-version,docker]
#    runs-on: ubuntu-latest
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
#        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
        version: ["5.1.3-alpine"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Get kubeconfig
        env:
          KUBECONFIG_FILE: '${{ secrets.KUBE_CONFIG }}'
        run: |
          mkdir -p ~/.kube
          echo $KUBECONFIG_FILE | base64 -d > ~/.kube/config
      - name: Create Namespace
        env:
          JOB_INDEX: ${{ strategy.job-index }}
        run: |
          $NAMESPACE=${REPO_NAME}-${GITHUB_RUN_ID}-${JOB_INDEX}
          kubectl create namespace $NAMESPACE
          echo $NAMESPACE >> $GITHUB_OUTPUT
      - name: Deploy RocketMQ
        working-directory: distribution/helm
        env:
          NAMESPACE: ${{ steps.create_namespace.outputs.namespace }}
          DOCKER_REPO: ${{ env.DOCKER_REPO }}
        run: |
          sh deploy-ci.sh ${DOCKER_REPO}  ${{ matrix.version }} ${NAMESPACE}

  test-e2e-grpc-java:
    if: ${{ success() }}
    name: Test E2E grpc java
    needs: [list-version, deploy]
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
#        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
        version: ["5.1.3-alpine"]
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: e2e test
        with:
          action: "test"
          ask-config: "${{ secrets.KUBE_CONFIG }}"
          test-version: "${{ matrix.version }}"
          test-code-git: "https://github.com/AutoMQ/rocketmq-e2e.git"
          test-code-branch: "master"
          test-code-path: java/e2e
          test-cmd: "mvn -B test"
          job-id: 0
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/test_report/TEST-*.xml'
          annotate_only: true
          include_passed: true
          detailed_summary: true
      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload test log
        with:
          name: test-e2e-grpc-java-log.txt
          path: testlog.txt
          
  test-e2e-golang:
    if: ${{ success() }}
    name: Test E2E golang
    needs: [list-version, deploy]
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
#        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
        version: ["5.1.3-alpine"]
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: e2e test
        with:
          action: "test"
          ask-config: "${{ secrets.KUBE_CONFIG }}"
          test-version: "${{ matrix.version }}"
          test-code-git: "https://github.com/AutoMQ/rocketmq-e2e.git"
          test-code-branch: "master"
          test-code-path: golang
          test-cmd: |
            cd ../common &&  mvn -Prelease -DskipTests clean package -U
            cd ../rocketmq-admintools && source bin/env.sh
            cd ../golang && go get -u github.com/apache/rocketmq-clients/golang && gotestsum --junitfile ./target/surefire-reports/TEST-report.xml ./mqgotest/... -timeout 2m  -v
          job-id: 0
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/test_report/TEST-*.xml'
          annotate_only: true
          include_passed: true
          detailed_summary: true
      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload test log
        with:
          name: test-e2e-golang-log.txt
          path: testlog.txt
          
  test-e2e-remoting-java:
    if: ${{ success() }}
    name: Test E2E remoting java
    needs: [ list-version, deploy ]
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
#        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
        version: ["5.1.3-alpine"]
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: e2e test
        with:
          action: "test"
          ask-config: "${{ secrets.KUBE_CONFIG }}"
          test-version: "${{ matrix.version }}"
          test-code-git: "https://github.com/AutoMQ/rocketmq-e2e.git"
          test-code-branch: "master"
          test-code-path: java/e2e-v4
          test-cmd: "mvn -B test"
          job-id: 0
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/test_report/TEST-*.xml'
          annotate_only: true
          include_passed: true
          detailed_summary: true
      - uses: actions/upload-artifact@v3
        if: always()
        name: Upload test log
        with:
          name: test-e2e-remoting-java-log.txt
          path: testlog.txt

  clean:
    if: always()
    name: Clean
    needs: [list-version, test-e2e-grpc-java, test-e2e-golang, test-e2e-remoting-java]
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: apache/rocketmq-test-tool@7d84d276ad7755b1dc5cf9657a7a9bff6ae6d288
        name: clean
        with:
          action: "clean"
          ask-config: "${{ secrets.KUBE_CONFIG }}"
          test-version: "${{ matrix.version }}"
          job-id: ${{ strategy.job-index }}
      - name: clean Rocketmq
        working-directory: distribution/helm
        env:
          DOCKER_REPO: ${{ env.DOCKER_REPO }}
        run: |
          sh clean-ci.sh
