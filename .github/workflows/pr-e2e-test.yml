name: E2E test for pull request

on:
  workflow_call:


env:
  HELM_NAME: automq-for-rocketmq
  DOCKER_REPO: automqinc/rocketmq_e2e

jobs:
  docker:
    runs-on: ubuntu-latest
    if: always()
    timeout-minutes: 30
    strategy:
      matrix:
        java-version: ["17"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Download artifact'
        uses: actions/download-artifact@v2
        with:
          name: rocketmq
          path: ${{github.workspace}}/distribution/target
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and save docker images
        id: build-images
        working-directory: ./distribution/docker
        run: |
          mkdir versionlist
          full_node_version=$(git ls-remote --tags | awk -F '/' 'END{print $3}')
          commit_version=$(git rev-parse --short HEAD)
          version=${full_node_version}-${commit_version}
          touch versionlist/"${version}"
          echo "version=${version}" >> $GITHUB_OUTPUT
          ls versionlist/
          sh build-ci.sh ${DOCKER_REPO} ${version}
          rm Dockerfile
          mv Dockerfile-ci Dockerfile
      - name: Docker export
        uses: docker/build-push-action@v5
        with:
          context: ./distribution/docker
          tags: ${{ env.DOCKER_REPO }}:${{ steps.build-images.outputs.version }}
          outputs: type=docker,dest=/tmp/automq-for-rocketmq.tar
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: automq-for-rocketmq
          path: /tmp/automq-for-rocketmq.tar
      - uses: actions/upload-artifact@v3
        name: Upload distribution versionlist
        with:
          name: versionlist
          path: ./distribution/docker/versionlist/*
  
  list-version:
    if: always()
    name: List version
    needs: [docker]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version-json: ${{ steps.show_versions.outputs.version-json }}
    steps:
      - uses: actions/download-artifact@v3
        name: Download versionlist
        with:
          name: versionlist
          path: versionlist
      - name: Show versions
        id: show_versions
        run: |
          a=(`ls versionlist`)
          printf '%s\n' "${a[@]}" | jq -R . | jq -s .
          echo version-json=`printf '%s\n' "${a[@]}" | jq -R . | jq -s .` >> $GITHUB_OUTPUT

  docker_push:
    if: ${{ success() }}
    name: Docker push
    needs: [ list-version, docker ]
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: automq-for-rocketmq
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/automq-for-rocketmq.tar
          docker image ls -a
          docker login
          docker push ${{ env.DOCKER_REPO }}:${{ matrix.version }}
          docker rmi ${{ env.DOCKER_REPO }}:${{ matrix.version }}

  deploy:
    if: ${{ success() }}
    name: Deploy RocketMQ
    needs: [list-version, docker, docker_push]
    runs-on: private-k3s
    timeout-minutes: 60
    outputs:
      namespace: ${{ steps.create_namespace.outputs.namespace }}
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: Create Namespace
        id: create_namespace
        env:
          JOB_INDEX: ${{ strategy.job-index }}
        run: |
          REPO_NAME=`echo ${GITHUB_REPOSITORY#*/} | sed -e "s/\//-/g" | cut -c1-36 | tr '[A-Z]' '[a-z]'`
          NAMESPACE=${REPO_NAME}-${GITHUB_RUN_ID}-${JOB_INDEX}
          kubectl create namespace $NAMESPACE
          echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
      - name: Deploy RocketMQ
        working-directory: distribution/helm
        env:
          NAMESPACE: ${{ steps.create_namespace.outputs.namespace }}
          DOCKER_REPO: ${{ env.DOCKER_REPO }}
        run: |
          bash deploy-ci.sh ${DOCKER_REPO} ${{ matrix.version }} ${NAMESPACE}

  test-e2e-grpc-java:
    if: ${{ success() }}
    name: Test E2E grpc java
    needs: [list-version, deploy]
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install flatc
        run: sudo bash install_flatc.sh
      - name: Build rocketmq dependency
        run: |
          mvn clean install -U -DskipTests
      - uses: actions/checkout@v3
        if: always()
        with:
          repository: AutoMQ/rocketmq-e2e
          ref: master
          path: rocketmq-e2e
      - name: e2e test
        env:
          HELM_NAME: ${{ env.HELM_NAME }}
          NAMESPACE: ${{ needs.deploy.outputs.namespace }}
        run: |
          cd rocketmq-e2e
          cd java/e2e && mvn -B test -DnamesrvAddr=${HELM_NAME}-rocketmq-broker.${NAMESPACE}.svc.pve1.local:8081 -DendPoint=${HELM_NAME}-rocketmq-broker.${NAMESPACE}.svc.pve1.local:8081
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/surefire-reports/TEST-*.xml'
          annotate_only: true
          include_passed: true
          detailed_summary: true

  # test-e2e-remoting-java:
  #   if: ${{ success() }}
  #   name: Test E2E remoting java
  #   needs: [ list-version, deploy ]
  #   runs-on: private-k3s
  #   timeout-minutes: 60
  #   strategy:
  #     matrix:
  #       version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
  #   steps:
  #     - name: Delay
  #       env:
  #         DELAY_SECONDS: 30
  #       run: |
  #         sleep $DELAY_SECONDS
  #     - uses: actions/checkout@v3
  #       with:
  #         submodules: true
  #     - name: Install flatc
  #       run: sudo bash install_flatc.sh
  #     - name: Build rocketmq dependency
  #       run: |
  #         mvn clean install -U -DskipTests
  #     - uses: actions/checkout@v3
  #       if: always()
  #       with:
  #         repository: AutoMQ/rocketmq-e2e
  #         ref: master
  #         path: rocketmq-e2e
  #     - name: e2e test
  #       env:
  #         HELM_NAME: ${{ env.HELM_NAME }}
  #         NAMESPACE: ${{ needs.deploy.outputs.namespace }}
  #       run: |
  #         cd rocketmq-e2e
  #         cd java/e2e-v4 && mvn -B test -DnamesrvAddr=${HELM_NAME}-rocketmq-broker.${NAMESPACE}.svc.pve1.local:8081
  #     - name: Publish Test Report
  #       uses: mikepenz/action-junit-report@v3
  #       if: always() # always run even if the previous step fails
  #       with:
  #         report_paths: '**/surefire-reports/TEST-*.xml'
  #         annotate_only: true
  #         include_passed: true
  #         detailed_summary: true

  clean:
    if: always()
    name: Clean
    # needs: [deploy, list-version, test-e2e-grpc-java, test-e2e-remoting-java]
    needs: [deploy, list-version, test-e2e-grpc-java]
    runs-on: private-k3s
    timeout-minutes: 60
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-version.outputs.version-json) }}
    steps:
      - name: clean deployment
        working-directory: distribution/helm
        env:
          NAMESPACE: ${{ needs.deploy.outputs.namespace }}
        run: |
          bash clean-ci.sh ${NAMESPACE}
          kubectl delete namespace $NAMESPACE
