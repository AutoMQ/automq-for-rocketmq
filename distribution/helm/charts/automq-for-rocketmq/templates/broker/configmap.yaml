# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "rocketmq-broker.clusterName" . }}-broker-conf
  labels:
    {{- include "rocketmq-broker.labels" . | nindent 4 }}
data:
  broker.conf: |
    instanceId: "{{- include "rocketmq-broker.clusterName" . }}"
    bindAddress: 0.0.0.0:8081

    innerAccessKey: ""
    innerSecretKey: ""

    s3Stream:
      s3WALPath: "/root/logs/wal"
      s3Endpoint: "{{- if .Values.localstack.enabled }}http://{{ .Release.Name }}-localstack:4566{{- else }}{{- .Values.broker.storage.s3.endpoint }}{{- end }}"
      s3Bucket: "{{ .Values.broker.storage.s3.bucket }}"
      s3Region: "{{ .Values.broker.storage.s3.region }}"
      s3ForcePathStyle: {{ .Values.broker.storage.s3.forcePathStyle }}
      s3AccessKey: "{{ .Values.broker.storage.s3.accessKey }}"
      s3SecretKey: "{{ .Values.broker.storage.s3.secretKey }}"
      networkBaselineBandwidth: {{ int .Values.broker.storage.s3.networkBaselineBandwidth }}
      refillPeriodMs: {{ .Values.broker.storage.s3.refillPeriodMs }}

    db:
      url: "{{- if .Values.mysql.enabled }}jdbc:mysql://{{ .Release.Name }}-mysql:3306/{{ .Values.mysql.auth.database }}{{- else }}{{- .Values.broker.db.url }}{{- end }}"
      userName: "{{ .Values.broker.db.userName }}"
      password: "{{ .Values.broker.db.password }}"

    store:
      kvPath: "/root/logs/kvstore"

    controller:
      recycleS3IntervalInSecs: 360
      dumpHeapOnError: true

   {{- if .Values.broker.metrics.enabled }}
    metrics:
      exporterType: "OTLP_GRPC"
      grpcExporterTarget: "http://localhost:4317"
      grpcExporterHeader: ""
      grpcExporterTimeOutInMills: 31000
      periodicExporterIntervalInMills: 30000
      promExporterPort: 5557
      promExporterHost: "localhost"
      labels: ""
      exportInDelta: false
   {{- else }}
    metrics:
      exporterType: "DISABLE"
   {{- end }}


---
{{- if .Values.mysql.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  initdb.sql: |
    use metadata;
    CREATE TABLE IF NOT EXISTS lease
    (
        node_id         INT      NOT NULL,
        epoch           INT      NOT NULL DEFAULT 0,
        expiration_time DATETIME NOT NULL
    );

    INSERT INTO lease(node_id, epoch, expiration_time)
    VALUES (0, 0, TIMESTAMP('2023-01-01'));

    CREATE TABLE IF NOT EXISTS node
    (
        id          INT          NOT NULL PRIMARY KEY AUTO_INCREMENT,
        name        VARCHAR(255) NOT NULL,
        instance_id VARCHAR(255),
        volume_id   VARCHAR(255),
        hostname    VARCHAR(255),
        vpc_id      VARCHAR(255),
        address     VARCHAR(255) NOT NULL,
        epoch       INT          NOT NULL DEFAULT 0,
        create_time DATETIME              DEFAULT CURRENT_TIMESTAMP,
        update_time DATETIME              DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE INDEX idx_name (name),
        UNIQUE INDEX idx_host_name (hostname),
        UNIQUE INDEX idx_address (address)
    );

    CREATE TABLE IF NOT EXISTS topic
    (
        id                   BIGINT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
        name                 VARCHAR(255) NOT NULL,
        queue_num            INT          NOT NULL DEFAULT 0,
        retention_hours      INT          NOT NULL DEFAULT 72,
        status               TINYINT               DEFAULT 0,
        create_time          DATETIME              DEFAULT current_timestamp,
        update_time          DATETIME              DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        accept_message_types JSON         NOT NULL,
        UNIQUE INDEX idx_topic_name (name)
    );

    CREATE TABLE IF NOT EXISTS queue_assignment
    (
        topic_id    BIGINT  NOT NULL,
        queue_id    INT     NOT NULL,
        src_node_id INT     NOT NULL,
        dst_node_id INT     NOT NULL,
        status      TINYINT NOT NULL,
        create_time DATETIME DEFAULT CURRENT_TIMESTAMP,
        update_time DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS stream
    (
        id           BIGINT    NOT NULL PRIMARY KEY AUTO_INCREMENT,
        topic_id     BIGINT    NOT NULL,
        queue_id     INT       NOT NULL,
        stream_role  TINYINT   NOT NULL DEFAULT 0,
        group_id     BIGINT    NULL,
        src_node_id  INT,
        dst_node_id  INT,
        epoch        BIGINT    NOT NULL DEFAULT -1,
        range_id     INT       NOT NULL DEFAULT -1,
        start_offset BIGINT    NOT NULL DEFAULT 0,
        state        INT       NOT NULL DEFAULT 1,
        create_time  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
        update_time  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE INDEX idx_queue (topic_id, queue_id, group_id, stream_role)
    );

    CREATE TABLE IF NOT EXISTS consumer_group
    (
        id                   BIGINT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
        name                 VARCHAR(255) NOT NULL,
        status               TINYINT      NOT NULL DEFAULT 0,
        dead_letter_topic_id BIGINT       NOT NULL DEFAULT 0,
        max_delivery_attempt INT          NOT NULL DEFAULT 16,
        group_type           TINYINT      NOT NULL DEFAULT 0,
        sub_mode             TINYINT      NOT NULL DEFAULT 0,
        create_time          DATETIME              DEFAULT CURRENT_TIMESTAMP,
        update_time          DATETIME              DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE INDEX idx_name (name)
    );

    CREATE TABLE IF NOT EXISTS subscription
    (
        id          BIGINT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
        group_id    BIGINT       NOT NULL,
        topic_id    BIGINT       NOT NULL,
        expression  VARCHAR(255) NOT NULL,
        create_time DATETIME DEFAULT CURRENT_TIMESTAMP,
        update_time DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE INDEX idx_subscription_group_topic (group_id, topic_id)
    );

    CREATE TABLE IF NOT EXISTS group_progress
    (
        group_id     BIGINT NOT NULL,
        topic_id     BIGINT NOT NULL,
        queue_id     INT    NOT NULL,
        queue_offset BIGINT NOT NULL,
        UNIQUE INDEX idx_group_progress (group_id, topic_id, queue_id)
    );

    CREATE TABLE IF NOT EXISTS `range`
    (
        id           BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        range_id     INT    NOT NULL,
        stream_id    BIGINT NOT NULL,
        epoch        BIGINT NOT NULL,
        start_offset BIGINT NOT NULL,
        end_offset   BIGINT NOT NULL,
        node_id      INT    NOT NULL,
        UNIQUE INDEX idx_stream_range (stream_id, range_id),
        INDEX idx_stream_start_offset (stream_id, start_offset)
    );

    CREATE TABLE IF NOT EXISTS s3object
    (
        id                            BIGINT       NOT NULL PRIMARY KEY,
        object_size                   BIGINT,
        stream_id                     BIGINT,
        prepared_timestamp            TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
        committed_timestamp           TIMESTAMP(3),
        expired_timestamp             TIMESTAMP(3) NOT NULL,
        marked_for_deletion_timestamp TIMESTAMP(3),
        state                         TINYINT      NOT NULL DEFAULT 1
    );

    CREATE TABLE IF NOT EXISTS s3streamobject
    (
        id                  BIGINT NOT NULL PRIMARY KEY AUTO_INCREMENT,
        stream_id           BIGINT NOT NULL,
        start_offset        BIGINT NOT NULL,
        end_offset          BIGINT NOT NULL,
        object_id           BIGINT NOT NULL,
        object_size         BIGINT NOT NULL,
        base_data_timestamp TIMESTAMP(3),
        committed_timestamp TIMESTAMP(3),
        created_timestamp   TIMESTAMP(3),
        UNIQUE INDEX uk_s3_stream_object_object_id (object_id),
        INDEX idx_s3_stream_object_stream_id (stream_id, start_offset)
    );

    CREATE TABLE IF NOT EXISTS s3streamsetobject
    (
        object_id           BIGINT NOT NULL,
        object_size         BIGINT NOT NULL,
        node_id             INT    NOT NULL,
        sequence_id         BIGINT NOT NULL,
        sub_streams         JSON   NOT NULL, -- immutable
        base_data_timestamp TIMESTAMP(3),
        committed_timestamp TIMESTAMP(3),
        created_timestamp   TIMESTAMP(3),
        UNIQUE INDEX uk_s3_stream_set_object_node_sequence_id (node_id, sequence_id),
        INDEX idx_s3_stream_set_object_object_id (object_id)
    );

    CREATE TABLE IF NOT EXISTS sequence
    (
        name VARCHAR(255) NOT NULL,
        next BIGINT       NOT NULL DEFAULT 1,
        UNIQUE INDEX idx_name (name)
    );
    INSERT INTO sequence(name)
    VALUES ('S3_OBJECT_ID_SEQ');

{{- end }}