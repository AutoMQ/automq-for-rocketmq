syntax = "proto3";

package apache.rocketmq.controller.v1;

import "model.proto";

option java_multiple_files = true;
option java_package = "apache.rocketmq.controller.v1";
option java_generate_equals_and_hash = true;
option java_string_check_utf8 = true;
option java_outer_classname = "ControllerApis";

message Uuid {
  int64 most_significant_bits = 1;
  int64 least_significant_bits = 2;
}

// Define all error codes here
enum Code {
  OK = 0;
  INTERRUPTED = 1;
  NOT_FOUND = 404;
  NO_LEADER = 1000;
  BAD_REQUEST = 1001;
}

message Status {
  Code code = 1;
  string message = 2;
}

// Aggregates common request headers, authentication, etc.
message ControllerRequestContext {}

message BrokerRegistrationRequest {
  ControllerRequestContext context = 1;

  // Name of the broker, controller node
  string broker_name = 2;

  // Address of the broker/controller node, through which to accept connections from peers
  string address = 3;

  // The instance-id of the elastic cloud
  string instance_id = 4;

  // To uniquely identify each instance of a specific broker ID. This field is designed to change in case of
  // broker restarts.
  Uuid fingerprint = 5;
}

message BrokerRegistrationReply {
  Status status = 1;

  // Broker-id
  int32 id = 2;

  // Term of the broker
  int64 epoch = 3;
}

message BrokerUnregistrationRequest {
  ControllerRequestContext context = 1;
  int32 broker_id = 2;
  string cluster_id = 3;
}

message BrokerUnregistrationReply {
  Status status = 1;
}

message BrokerHeartbeatRequest {
  int32 id = 1;
  int64 term = 2;

  // Flag whether this broker is going to shutdown shortly.
  bool going_away = 3;
}

message BrokerHeartbeatReply {
  Status status = 1;
}

message CreateTopicRequest {
  ControllerRequestContext context = 1;
  string topic = 2;
  int32 count = 3;
}

message CreateTopicReply {
  Status status = 1;
  int64 topic_id = 2;
}

message DescribeTopicRequest {
  ControllerRequestContext context = 1;
  int64 topic_id = 2;
  string topic_name = 3;
}

message DescribeTopicReply {
  Status status = 1;
  Topic topic = 2;
}

message ListTopicsRequest {
  ControllerRequestContext context = 1;
}

// Use server streaming in case there are a large number of topics available.
message ListTopicsReply {
  Status status = 1;
  Topic topic = 2;
}

message UpdateTopicRequest {
  ControllerRequestContext context = 1;
  // Required field
  int64 topic_id = 2;

  // No op if this field is absent
  string name = 3;

  // Effective if non-zero
  int32 count = 4;
}

message UpdateTopicReply {
  Status status = 1;
  Topic topic = 2;
}

message DeleteTopicRequest {
  ControllerRequestContext context = 1;
  int64 topic_id = 2;
}

message DeleteTopicReply {
  Status status = 1;
}

message ListMessageQueueReassignmentsRequest {
  ControllerRequestContext context = 1;
  repeated string topics = 2;
}

message ListMessageQueueReassignmentsReply {
  Status status = 1;
  repeated OngoingTopicReassignment reassignments = 2;
}

// Controller in leader role would use this request to instruct broker, which is serving the message queue, to conduct
// migration procedure.
message ReassignMessageQueueRequest {
  ControllerRequestContext context = 1;
  MessageQueue queue = 2;
  int32 src_broker_id = 3;
  int32 dst_broker_id = 4;
}

message ReassignMessageQueueReply {
  Status status = 1;
}

message NotifyMessageQueuesAssignableRequest {
  ControllerRequestContext context = 1;
  repeated MessageQueue queues = 2;
}

message NotifyMessageQueuesAssignableReply {
  Status status = 1;
}

message ListTopicMessageQueueAssignmentsRequest {
  ControllerRequestContext context = 1;

  // Use 'topic name' instead of 'topic_id' for the convenience of building toolset
  string name = 2;
}

message ListTopicMessageQueueAssignmentsReply {
  Status status = 1;
  repeated MessageQueueAssignment assignments = 2;
}

message CommitOffsetRequest {
  ControllerRequestContext context = 1;
  int64 group_id = 2;
  MessageQueue queue = 3;
  int64 offset = 4;
}

message CommitOffsetReply {
  Status status = 1;
}

service ControllerService {
  rpc registerBroker(BrokerRegistrationRequest) returns (BrokerRegistrationReply) {}

  rpc unregisterBroker(BrokerUnregistrationRequest) returns (BrokerUnregistrationReply) {}

  rpc processBrokerHeartbeat(BrokerHeartbeatRequest) returns (BrokerHeartbeatReply) {}

  rpc createTopic(CreateTopicRequest) returns (CreateTopicReply) {}

  rpc describeTopic(DescribeTopicRequest) returns (DescribeTopicReply) {}

  rpc listAllTopics(ListTopicsRequest) returns (stream ListTopicsReply) {}

  rpc updateTopic(UpdateTopicRequest) returns (Topic) {}

  rpc deleteTopic(DeleteTopicRequest) returns (DeleteTopicReply) {}

  rpc listTopicMessageQueues(ListTopicMessageQueueAssignmentsRequest) returns (ListTopicMessageQueueAssignmentsReply) {}

  // Reassign message queue from one broker to another.
  rpc reassignMessageQueue(ReassignMessageQueueRequest) returns (ReassignMessageQueueReply) {}

  // For broker to notify leader controller that the message queues have become assignable. Message queues might be in
  // its own charge or just adopted from a crashed node.
  rpc notifyMessageQueueAssignable(NotifyMessageQueuesAssignableRequest) returns (NotifyMessageQueuesAssignableReply) {}

  // List ongoing message queue reassignments.
  rpc listMessageQueueReassignments(ListMessageQueueReassignmentsRequest) returns (ListMessageQueueReassignmentsReply) {}

  rpc commitOffset(CommitOffsetRequest) returns (CommitOffsetReply) {}
}

